//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EwService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EwService.ServiceSoap")]
    public interface ServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchExistingCustomerByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> SearchExistingCustomerByNameAsync(string lastname, string firstname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchExistingCustomerByCorporate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> SearchExistingCustomerByCorporateAsync(string fullname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> getNubanAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowCustomerDetailsByPartyID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ShowCustomerDetailsByPartyIDAsync(string partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveVisaRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaveVisaRequestAsync(
                    string nuban, 
                    string telephone, 
                    string gsm, 
                    string email, 
                    string namePrefix, 
                    string gender, 
                    string passportNum, 
                    string passportIssuedate, 
                    string passportExpirydate, 
                    string passportPlaceofIssue, 
                    string secretQuestion, 
                    string secretAnswer, 
                    int resident, 
                    int countryResident, 
                    int billingCountry, 
                    int billingRegion, 
                    int billingCityofReg, 
                    string billingAddress, 
                    int homeCountry, 
                    int homeRegion, 
                    int homeCity, 
                    string homeAddress, 
                    string addedBy, 
                    string cardFirstName, 
                    string cardSurname, 
                    string dob, 
                    string carddeliveryverve, 
                    string pinDeliveryVerve);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveChequeBookRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaveChequeBookRequestAsync(string nuban, int booklets, int statec, int branchCode, string branchName, int deliveryBranchCode, string chequeName, int chequeSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsVerveCardExisting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IsVerveCardExistingAsync(string cusNum, string ledCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsVerveCardExistingNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IsVerveCardExistingNubanAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetChequeTemplateNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetChequeTemplateNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetChequeStateCodes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetChequeStateCodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BasicOpening", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> BasicOpeningAsync(string FirstName, string LastName, string OtherName, string Gender, string Mobile, string Email, string Title, string HomeAddress, string HomeState, string BirthDate, string DocumentReference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBranches", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBranchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSMSAsync(string message, string gsm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveInstantCardRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaveInstantCardRequestAsync(string nuban, string city, string region, string cardDeliveryBranch, string pinDeliveryBranch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveVerveCardRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaveVerveCardRequestAsync(string nuban, string city, string region, string cardDeliveryBranch, string pinDeliveryBranch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsPNDExisting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IsPNDExistingAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsPNDExistingByNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IsPNDExistingByNubanAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsKYCComplete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IsKYCCompleteAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsKYCCompleteByNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IsKYCCompleteByNubanAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetKYCStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetKYCStatusAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetKYCStatusNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetKYCStatusNubanAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetKYCDetailsByNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetKYCDetailsByNubanAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetKYCDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetKYCDetailsAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetHumanManagerData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetHumanManagerDataAsync(string staffNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetADDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetADDetailsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetADDetailsByEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetADDetailsByEmailAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GeneratePartyID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GeneratePartyIDAsync(string bracode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBankCustByCus_Nums", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankCustByCus_NumsAsync(string cusNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIMALCustByCIF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetIMALCustByCIFAsync(int cif_no);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBankCusNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankCusNumAsync(string cusNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PutPND", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PutPNDAsync(string BRA_CODE, string CUS_NUM, string CUR_CODE, string LED_CODE, string SUB_ACCT_CODE, string TELL_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBranchCodeForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetBranchCodeForUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTellerForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetTellerForUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateTSSAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateTSSAccountAsync(string braCode, string cusNum, string curCode, string ledCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateNewAccountForExistingCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateNewAccountForExistingCustomerAsync(string BRA_CODE, string CUS_NUM, string NEW_BRA_CODE, string NEW_CUR_CODE, string LED_CODE, string ACCT_NAT, string TELL_USERNAME, string APPLY_PND);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateNewAccountForExistingCustomerPos", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateNewAccountForExistingCustomerPosAsync(string BRA_CODE, string CUS_NUM, string NEW_BRA_CODE, string NEW_CUR_CODE, string LED_CODE, string ACCT_NAT, string TELL_USERNAME, string APPLY_PND);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateNewAccountForExistingCustomerNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateNewAccountForExistingCustomerNubanAsync(string nuban, string NEW_BRA_CODE, string NEW_CUR_CODE, string LED_CODE, string ACCT_NAT, string TELL_USERNAME, string APPLY_PND);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateNewCustomerAndAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateNewCustomerAndAccountAsync(
                    string TELL_USERNAME, 
                    string ADDRESS_LINE1, 
                    string ADDRESS_LINE2, 
                    string BIR_DATE_STR, 
                    string BRA_CODE, 
                    string ADDRESS_STATE_CODE, 
                    string COUNTRY_OF_RESIDENCE_CODE, 
                    string CUSTOMER_CLASSIFICATION_CODE, 
                    string CUSTOMER_NAME, 
                    string EMAIL, 
                    string GENDER, 
                    string CUR_CODE, 
                    string LED_CODE, 
                    string ACCT_NAT, 
                    string MOB_NUM, 
                    string FNAME, 
                    string MNAME, 
                    string LNAME, 
                    string NATIONALITY_CODE, 
                    string OLD_CUSTOMER_NUMBER, 
                    string LGA_OF_ORIGIN_CODE, 
                    string REG_NUM, 
                    string SOCIAL_SECURITY_NUM, 
                    string STATE_ORIGIN_CODE, 
                    string TITLE_CODE, 
                    string TOWN, 
                    string APPLY_PND);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getBranch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> getBranchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBVN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBVNAsync(string bvn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLedger", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetLedgerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTitle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetTitleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTitleName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetTitleNameAsync(string titleCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStateName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetStateNameAsync(string stateCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetCountryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNationality", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetNationalityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStateOfOrigin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetStateOfOriginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountCategory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLgaOrigin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetLgaOriginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerClassification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetCustomerClassificationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountNature", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountNatureAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountDetailsByNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountDetailsByNubanAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ConvertNubanToBanksFormat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> ConvertNubanToBanksFormatAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountDetailsAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountDetails2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountDetails2Async(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsTellerIDExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> IsTellerIDExistsAsync(string tellerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getRegionalChannelCoordinatorUsernameForBranchCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> getRegionalChannelCoordinatorUsernameForBranchCodeAsync(string bracode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isRegionalChannelCoordinatorForBranchCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> isRegionalChannelCoordinatorForBranchCodeAsync(string username, string bracode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendMailAsync(string destinationEmail, string sourceEmail, string body, string subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendMailWithAttachment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.SendMailWithAttachmentResponse> SendMailWithAttachmentAsync(EwService.SendMailWithAttachmentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsTellerIDPasswordActive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> IsTellerIDPasswordActiveAsync(string tellerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAdDetailsByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAdDetailsByIDAsync(string StaffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Numbergenerate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NumbergenerateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetHighestRankedStaff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetHighestRankedStaffAsync(string[] staffusernames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllStaffGrade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetAllStaffGradeAsync(string staffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStaffGradeWithStaffID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetStaffGradeWithStaffIDAsync(string staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIMALCustByAcctNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetIMALCustByAcctNoAsync(string cif_no);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIMALCustByMobile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetIMALCustByMobileAsync(string mobile_234_format, string mobile_080_format);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBankCustByNuban", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankCustByNubanAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountsByMobileNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountsByMobileNoAsync(string mobileNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBankCustByMobile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankCustByMobileAsync(string mobile_234_format, string mobile_080_format);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBankName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetBankNameAsync(string bankCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBankBVN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankBVNAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIMALBVN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetIMALBVNAsync(string nuban);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckNUBANForComplaint", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> CheckNUBANForComplaintAsync(string NUBAN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAccountFullinfoAllForComplaint", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> getAccountFullinfoAllForComplaintAsync(string NUBAN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckAcct", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> CheckAcctAsync(string AccNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getClientsForIMAL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> getClientsForIMALAsync(string rrr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckNUBANOmImal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> CheckNUBANOmImalAsync(string NUBAN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getcurrec", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> getcurrecAsync(string cc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAcctTypeFromBank", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> getAcctTypeFromBankAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_led_code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWorkflowTrackerExceptions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> GetWorkflowTrackerExceptionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsUserOnLeave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IsUserOnLeaveAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserIDForCardRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetUserIDForCardRequestAsync(string adUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCardProducts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetCardProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SubmitCardRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SubmitCardRequestAsync(
                    string Customernumber, 
                    string Currencycode, 
                    string Ledgercode, 
                    string CusName, 
                    string Address, 
                    string Phone, 
                    string Cellphone, 
                    string Email, 
                    string Title, 
                    string Sex, 
                    string Cuscity, 
                    string Cardmidname, 
                    string Cusregion, 
                    string Account, 
                    string Cardfirstname, 
                    string Cardsurname, 
                    string Carddelivery, 
                    string Pindelivery, 
                    string PASNOM, 
                    string Dateissued, 
                    string PasExpDat, 
                    string PasPlace, 
                    string SecretQuer, 
                    string SecretAnsw, 
                    string Resident, 
                    string CountryRes, 
                    string CntryReg, 
                    string RegionReg, 
                    string CityReg, 
                    string ResAddress, 
                    string CntryLive, 
                    string Birthday, 
                    string GroupCmd, 
                    string FinProf, 
                    string productID, 
                    string ChannelID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/checkWatchList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<EwService.ArrayOfXElement> checkWatchListAsync(string FN, string LN);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendMailWithAttachment", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SendMailWithAttachmentRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string destinationEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string sourceEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string body;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string subject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string ccEmailSeparatedByComma;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] attachmentData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string attachmentFilename;
        
        public SendMailWithAttachmentRequest()
        {
        }
        
        public SendMailWithAttachmentRequest(string destinationEmail, string sourceEmail, string body, string subject, string ccEmailSeparatedByComma, byte[] attachmentData, string attachmentFilename)
        {
            this.destinationEmail = destinationEmail;
            this.sourceEmail = sourceEmail;
            this.body = body;
            this.subject = subject;
            this.ccEmailSeparatedByComma = ccEmailSeparatedByComma;
            this.attachmentData = attachmentData;
            this.attachmentFilename = attachmentFilename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendMailWithAttachmentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SendMailWithAttachmentResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string SendMailWithAttachmentResult;
        
        public SendMailWithAttachmentResponse()
        {
        }
        
        public SendMailWithAttachmentResponse(string SendMailWithAttachmentResult)
        {
            this.SendMailWithAttachmentResult = SendMailWithAttachmentResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ServiceSoapChannel : EwService.ServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<EwService.ServiceSoap>, EwService.ServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), ServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> SearchExistingCustomerByNameAsync(string lastname, string firstname)
        {
            return base.Channel.SearchExistingCustomerByNameAsync(lastname, firstname);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> SearchExistingCustomerByCorporateAsync(string fullname)
        {
            return base.Channel.SearchExistingCustomerByCorporateAsync(fullname);
        }
        
        public System.Threading.Tasks.Task<string> getNubanAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            return base.Channel.getNubanAsync(bracode, cusnum, curcode, ledcode, subacctcode);
        }
        
        public System.Threading.Tasks.Task<string> ShowCustomerDetailsByPartyIDAsync(string partyID)
        {
            return base.Channel.ShowCustomerDetailsByPartyIDAsync(partyID);
        }
        
        public System.Threading.Tasks.Task<string> SaveVisaRequestAsync(
                    string nuban, 
                    string telephone, 
                    string gsm, 
                    string email, 
                    string namePrefix, 
                    string gender, 
                    string passportNum, 
                    string passportIssuedate, 
                    string passportExpirydate, 
                    string passportPlaceofIssue, 
                    string secretQuestion, 
                    string secretAnswer, 
                    int resident, 
                    int countryResident, 
                    int billingCountry, 
                    int billingRegion, 
                    int billingCityofReg, 
                    string billingAddress, 
                    int homeCountry, 
                    int homeRegion, 
                    int homeCity, 
                    string homeAddress, 
                    string addedBy, 
                    string cardFirstName, 
                    string cardSurname, 
                    string dob, 
                    string carddeliveryverve, 
                    string pinDeliveryVerve)
        {
            return base.Channel.SaveVisaRequestAsync(nuban, telephone, gsm, email, namePrefix, gender, passportNum, passportIssuedate, passportExpirydate, passportPlaceofIssue, secretQuestion, secretAnswer, resident, countryResident, billingCountry, billingRegion, billingCityofReg, billingAddress, homeCountry, homeRegion, homeCity, homeAddress, addedBy, cardFirstName, cardSurname, dob, carddeliveryverve, pinDeliveryVerve);
        }
        
        public System.Threading.Tasks.Task<string> SaveChequeBookRequestAsync(string nuban, int booklets, int statec, int branchCode, string branchName, int deliveryBranchCode, string chequeName, int chequeSN)
        {
            return base.Channel.SaveChequeBookRequestAsync(nuban, booklets, statec, branchCode, branchName, deliveryBranchCode, chequeName, chequeSN);
        }
        
        public System.Threading.Tasks.Task<string> IsVerveCardExistingAsync(string cusNum, string ledCode)
        {
            return base.Channel.IsVerveCardExistingAsync(cusNum, ledCode);
        }
        
        public System.Threading.Tasks.Task<string> IsVerveCardExistingNubanAsync(string nuban)
        {
            return base.Channel.IsVerveCardExistingNubanAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetChequeTemplateNamesAsync()
        {
            return base.Channel.GetChequeTemplateNamesAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetChequeStateCodesAsync()
        {
            return base.Channel.GetChequeStateCodesAsync();
        }
        
        public System.Threading.Tasks.Task<string> BasicOpeningAsync(string FirstName, string LastName, string OtherName, string Gender, string Mobile, string Email, string Title, string HomeAddress, string HomeState, string BirthDate, string DocumentReference)
        {
            return base.Channel.BasicOpeningAsync(FirstName, LastName, OtherName, Gender, Mobile, Email, Title, HomeAddress, HomeState, BirthDate, DocumentReference);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBranchesAsync()
        {
            return base.Channel.GetBranchesAsync();
        }
        
        public System.Threading.Tasks.Task<string> SendSMSAsync(string message, string gsm)
        {
            return base.Channel.SendSMSAsync(message, gsm);
        }
        
        public System.Threading.Tasks.Task<string> SaveInstantCardRequestAsync(string nuban, string city, string region, string cardDeliveryBranch, string pinDeliveryBranch)
        {
            return base.Channel.SaveInstantCardRequestAsync(nuban, city, region, cardDeliveryBranch, pinDeliveryBranch);
        }
        
        public System.Threading.Tasks.Task<string> SaveVerveCardRequestAsync(string nuban, string city, string region, string cardDeliveryBranch, string pinDeliveryBranch)
        {
            return base.Channel.SaveVerveCardRequestAsync(nuban, city, region, cardDeliveryBranch, pinDeliveryBranch);
        }
        
        public System.Threading.Tasks.Task<string> IsPNDExistingAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode)
        {
            return base.Channel.IsPNDExistingAsync(braCode, cusNum, curCode, ledCode, subAcctCode);
        }
        
        public System.Threading.Tasks.Task<string> IsPNDExistingByNubanAsync(string nuban)
        {
            return base.Channel.IsPNDExistingByNubanAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<string> IsKYCCompleteAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode)
        {
            return base.Channel.IsKYCCompleteAsync(braCode, cusNum, curCode, ledCode, subAcctCode);
        }
        
        public System.Threading.Tasks.Task<string> IsKYCCompleteByNubanAsync(string nuban)
        {
            return base.Channel.IsKYCCompleteByNubanAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<string> GetKYCStatusAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode)
        {
            return base.Channel.GetKYCStatusAsync(braCode, cusNum, curCode, ledCode, subAcctCode);
        }
        
        public System.Threading.Tasks.Task<string> GetKYCStatusNubanAsync(string nuban)
        {
            return base.Channel.GetKYCStatusNubanAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetKYCDetailsByNubanAsync(string nuban)
        {
            return base.Channel.GetKYCDetailsByNubanAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetKYCDetailsAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode)
        {
            return base.Channel.GetKYCDetailsAsync(braCode, cusNum, curCode, ledCode, subAcctCode);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetHumanManagerDataAsync(string staffNumber)
        {
            return base.Channel.GetHumanManagerDataAsync(staffNumber);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetADDetailsAsync(string username)
        {
            return base.Channel.GetADDetailsAsync(username);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetADDetailsByEmailAsync(string emailAddress)
        {
            return base.Channel.GetADDetailsByEmailAsync(emailAddress);
        }
        
        public System.Threading.Tasks.Task<string> GeneratePartyIDAsync(string bracode)
        {
            return base.Channel.GeneratePartyIDAsync(bracode);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankCustByCus_NumsAsync(string cusNum)
        {
            return base.Channel.GetBankCustByCus_NumsAsync(cusNum);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetIMALCustByCIFAsync(int cif_no)
        {
            return base.Channel.GetIMALCustByCIFAsync(cif_no);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankCusNumAsync(string cusNum)
        {
            return base.Channel.GetBankCusNumAsync(cusNum);
        }
        
        public System.Threading.Tasks.Task<string> PutPNDAsync(string BRA_CODE, string CUS_NUM, string CUR_CODE, string LED_CODE, string SUB_ACCT_CODE, string TELL_ID)
        {
            return base.Channel.PutPNDAsync(BRA_CODE, CUS_NUM, CUR_CODE, LED_CODE, SUB_ACCT_CODE, TELL_ID);
        }
        
        public System.Threading.Tasks.Task<string> GetBranchCodeForUserAsync(string username)
        {
            return base.Channel.GetBranchCodeForUserAsync(username);
        }
        
        public System.Threading.Tasks.Task<string> GetTellerForUserAsync(string username)
        {
            return base.Channel.GetTellerForUserAsync(username);
        }
        
        public System.Threading.Tasks.Task<string> CreateTSSAccountAsync(string braCode, string cusNum, string curCode, string ledCode)
        {
            return base.Channel.CreateTSSAccountAsync(braCode, cusNum, curCode, ledCode);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewAccountForExistingCustomerAsync(string BRA_CODE, string CUS_NUM, string NEW_BRA_CODE, string NEW_CUR_CODE, string LED_CODE, string ACCT_NAT, string TELL_USERNAME, string APPLY_PND)
        {
            return base.Channel.CreateNewAccountForExistingCustomerAsync(BRA_CODE, CUS_NUM, NEW_BRA_CODE, NEW_CUR_CODE, LED_CODE, ACCT_NAT, TELL_USERNAME, APPLY_PND);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewAccountForExistingCustomerPosAsync(string BRA_CODE, string CUS_NUM, string NEW_BRA_CODE, string NEW_CUR_CODE, string LED_CODE, string ACCT_NAT, string TELL_USERNAME, string APPLY_PND)
        {
            return base.Channel.CreateNewAccountForExistingCustomerPosAsync(BRA_CODE, CUS_NUM, NEW_BRA_CODE, NEW_CUR_CODE, LED_CODE, ACCT_NAT, TELL_USERNAME, APPLY_PND);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewAccountForExistingCustomerNubanAsync(string nuban, string NEW_BRA_CODE, string NEW_CUR_CODE, string LED_CODE, string ACCT_NAT, string TELL_USERNAME, string APPLY_PND)
        {
            return base.Channel.CreateNewAccountForExistingCustomerNubanAsync(nuban, NEW_BRA_CODE, NEW_CUR_CODE, LED_CODE, ACCT_NAT, TELL_USERNAME, APPLY_PND);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewCustomerAndAccountAsync(
                    string TELL_USERNAME, 
                    string ADDRESS_LINE1, 
                    string ADDRESS_LINE2, 
                    string BIR_DATE_STR, 
                    string BRA_CODE, 
                    string ADDRESS_STATE_CODE, 
                    string COUNTRY_OF_RESIDENCE_CODE, 
                    string CUSTOMER_CLASSIFICATION_CODE, 
                    string CUSTOMER_NAME, 
                    string EMAIL, 
                    string GENDER, 
                    string CUR_CODE, 
                    string LED_CODE, 
                    string ACCT_NAT, 
                    string MOB_NUM, 
                    string FNAME, 
                    string MNAME, 
                    string LNAME, 
                    string NATIONALITY_CODE, 
                    string OLD_CUSTOMER_NUMBER, 
                    string LGA_OF_ORIGIN_CODE, 
                    string REG_NUM, 
                    string SOCIAL_SECURITY_NUM, 
                    string STATE_ORIGIN_CODE, 
                    string TITLE_CODE, 
                    string TOWN, 
                    string APPLY_PND)
        {
            return base.Channel.CreateNewCustomerAndAccountAsync(TELL_USERNAME, ADDRESS_LINE1, ADDRESS_LINE2, BIR_DATE_STR, BRA_CODE, ADDRESS_STATE_CODE, COUNTRY_OF_RESIDENCE_CODE, CUSTOMER_CLASSIFICATION_CODE, CUSTOMER_NAME, EMAIL, GENDER, CUR_CODE, LED_CODE, ACCT_NAT, MOB_NUM, FNAME, MNAME, LNAME, NATIONALITY_CODE, OLD_CUSTOMER_NUMBER, LGA_OF_ORIGIN_CODE, REG_NUM, SOCIAL_SECURITY_NUM, STATE_ORIGIN_CODE, TITLE_CODE, TOWN, APPLY_PND);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> getBranchAsync()
        {
            return base.Channel.getBranchAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBVNAsync(string bvn)
        {
            return base.Channel.GetBVNAsync(bvn);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetLedgerAsync()
        {
            return base.Channel.GetLedgerAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetTitleAsync()
        {
            return base.Channel.GetTitleAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetTitleNameAsync(string titleCode)
        {
            return base.Channel.GetTitleNameAsync(titleCode);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetStateAsync()
        {
            return base.Channel.GetStateAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetStateNameAsync(string stateCode)
        {
            return base.Channel.GetStateNameAsync(stateCode);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetCountryAsync()
        {
            return base.Channel.GetCountryAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetNationalityAsync()
        {
            return base.Channel.GetNationalityAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetStateOfOriginAsync()
        {
            return base.Channel.GetStateOfOriginAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountCategoryAsync()
        {
            return base.Channel.GetAccountCategoryAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetLgaOriginAsync()
        {
            return base.Channel.GetLgaOriginAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetCustomerClassificationAsync()
        {
            return base.Channel.GetCustomerClassificationAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountNatureAsync()
        {
            return base.Channel.GetAccountNatureAsync();
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountDetailsByNubanAsync(string nuban)
        {
            return base.Channel.GetAccountDetailsByNubanAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> ConvertNubanToBanksFormatAsync(string nuban)
        {
            return base.Channel.ConvertNubanToBanksFormatAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountDetailsAsync(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode)
        {
            return base.Channel.GetAccountDetailsAsync(braCode, cusNum, curCode, ledCode, subAcctCode);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountDetails2Async(string braCode, string cusNum, string curCode, string ledCode, string subAcctCode)
        {
            return base.Channel.GetAccountDetails2Async(braCode, cusNum, curCode, ledCode, subAcctCode);
        }
        
        public System.Threading.Tasks.Task<bool> IsTellerIDExistsAsync(string tellerid)
        {
            return base.Channel.IsTellerIDExistsAsync(tellerid);
        }
        
        public System.Threading.Tasks.Task<string> getRegionalChannelCoordinatorUsernameForBranchCodeAsync(string bracode)
        {
            return base.Channel.getRegionalChannelCoordinatorUsernameForBranchCodeAsync(bracode);
        }
        
        public System.Threading.Tasks.Task<string> isRegionalChannelCoordinatorForBranchCodeAsync(string username, string bracode)
        {
            return base.Channel.isRegionalChannelCoordinatorForBranchCodeAsync(username, bracode);
        }
        
        public System.Threading.Tasks.Task<string> SendMailAsync(string destinationEmail, string sourceEmail, string body, string subject)
        {
            return base.Channel.SendMailAsync(destinationEmail, sourceEmail, body, subject);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EwService.SendMailWithAttachmentResponse> EwService.ServiceSoap.SendMailWithAttachmentAsync(EwService.SendMailWithAttachmentRequest request)
        {
            return base.Channel.SendMailWithAttachmentAsync(request);
        }
        
        public System.Threading.Tasks.Task<EwService.SendMailWithAttachmentResponse> SendMailWithAttachmentAsync(string destinationEmail, string sourceEmail, string body, string subject, string ccEmailSeparatedByComma, byte[] attachmentData, string attachmentFilename)
        {
            EwService.SendMailWithAttachmentRequest inValue = new EwService.SendMailWithAttachmentRequest();
            inValue.destinationEmail = destinationEmail;
            inValue.sourceEmail = sourceEmail;
            inValue.body = body;
            inValue.subject = subject;
            inValue.ccEmailSeparatedByComma = ccEmailSeparatedByComma;
            inValue.attachmentData = attachmentData;
            inValue.attachmentFilename = attachmentFilename;
            return ((EwService.ServiceSoap)(this)).SendMailWithAttachmentAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<bool> IsTellerIDPasswordActiveAsync(string tellerid)
        {
            return base.Channel.IsTellerIDPasswordActiveAsync(tellerid);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAdDetailsByIDAsync(string StaffID)
        {
            return base.Channel.GetAdDetailsByIDAsync(StaffID);
        }
        
        public System.Threading.Tasks.Task<string> NumbergenerateAsync()
        {
            return base.Channel.NumbergenerateAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetHighestRankedStaffAsync(string[] staffusernames)
        {
            return base.Channel.GetHighestRankedStaffAsync(staffusernames);
        }
        
        public System.Threading.Tasks.Task<string> GetAllStaffGradeAsync(string staffId)
        {
            return base.Channel.GetAllStaffGradeAsync(staffId);
        }
        
        public System.Threading.Tasks.Task<string> GetStaffGradeWithStaffIDAsync(string staffID)
        {
            return base.Channel.GetStaffGradeWithStaffIDAsync(staffID);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetIMALCustByAcctNoAsync(string cif_no)
        {
            return base.Channel.GetIMALCustByAcctNoAsync(cif_no);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetIMALCustByMobileAsync(string mobile_234_format, string mobile_080_format)
        {
            return base.Channel.GetIMALCustByMobileAsync(mobile_234_format, mobile_080_format);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankCustByNubanAsync(string nuban)
        {
            return base.Channel.GetBankCustByNubanAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetAccountsByMobileNoAsync(string mobileNo)
        {
            return base.Channel.GetAccountsByMobileNoAsync(mobileNo);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankCustByMobileAsync(string mobile_234_format, string mobile_080_format)
        {
            return base.Channel.GetBankCustByMobileAsync(mobile_234_format, mobile_080_format);
        }
        
        public System.Threading.Tasks.Task<string> GetBankNameAsync(string bankCode)
        {
            return base.Channel.GetBankNameAsync(bankCode);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetBankBVNAsync(string nuban)
        {
            return base.Channel.GetBankBVNAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetIMALBVNAsync(string nuban)
        {
            return base.Channel.GetIMALBVNAsync(nuban);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> CheckNUBANForComplaintAsync(string NUBAN)
        {
            return base.Channel.CheckNUBANForComplaintAsync(NUBAN);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> getAccountFullinfoAllForComplaintAsync(string NUBAN)
        {
            return base.Channel.getAccountFullinfoAllForComplaintAsync(NUBAN);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> CheckAcctAsync(string AccNum)
        {
            return base.Channel.CheckAcctAsync(AccNum);
        }
        
        public System.Threading.Tasks.Task<string> getClientsForIMALAsync(string rrr)
        {
            return base.Channel.getClientsForIMALAsync(rrr);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> CheckNUBANOmImalAsync(string NUBAN)
        {
            return base.Channel.CheckNUBANOmImalAsync(NUBAN);
        }
        
        public System.Threading.Tasks.Task<string> getcurrecAsync(string cc)
        {
            return base.Channel.getcurrecAsync(cc);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> getAcctTypeFromBankAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_led_code)
        {
            return base.Channel.getAcctTypeFromBankAsync(bra_code, cus_num, cur_code, led_code, sub_led_code);
        }
        
        public System.Threading.Tasks.Task<string[]> GetWorkflowTrackerExceptionsAsync()
        {
            return base.Channel.GetWorkflowTrackerExceptionsAsync();
        }
        
        public System.Threading.Tasks.Task<string> IsUserOnLeaveAsync(string username)
        {
            return base.Channel.IsUserOnLeaveAsync(username);
        }
        
        public System.Threading.Tasks.Task<string> GetUserIDForCardRequestAsync(string adUsername)
        {
            return base.Channel.GetUserIDForCardRequestAsync(adUsername);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> GetCardProductsAsync()
        {
            return base.Channel.GetCardProductsAsync();
        }
        
        public System.Threading.Tasks.Task<string> SubmitCardRequestAsync(
                    string Customernumber, 
                    string Currencycode, 
                    string Ledgercode, 
                    string CusName, 
                    string Address, 
                    string Phone, 
                    string Cellphone, 
                    string Email, 
                    string Title, 
                    string Sex, 
                    string Cuscity, 
                    string Cardmidname, 
                    string Cusregion, 
                    string Account, 
                    string Cardfirstname, 
                    string Cardsurname, 
                    string Carddelivery, 
                    string Pindelivery, 
                    string PASNOM, 
                    string Dateissued, 
                    string PasExpDat, 
                    string PasPlace, 
                    string SecretQuer, 
                    string SecretAnsw, 
                    string Resident, 
                    string CountryRes, 
                    string CntryReg, 
                    string RegionReg, 
                    string CityReg, 
                    string ResAddress, 
                    string CntryLive, 
                    string Birthday, 
                    string GroupCmd, 
                    string FinProf, 
                    string productID, 
                    string ChannelID)
        {
            return base.Channel.SubmitCardRequestAsync(Customernumber, Currencycode, Ledgercode, CusName, Address, Phone, Cellphone, Email, Title, Sex, Cuscity, Cardmidname, Cusregion, Account, Cardfirstname, Cardsurname, Carddelivery, Pindelivery, PASNOM, Dateissued, PasExpDat, PasPlace, SecretQuer, SecretAnsw, Resident, CountryRes, CntryReg, RegionReg, CityReg, ResAddress, CntryLive, Birthday, GroupCmd, FinProf, productID, ChannelID);
        }
        
        public System.Threading.Tasks.Task<EwService.ArrayOfXElement> checkWatchListAsync(string FN, string LN)
        {
            return base.Channel.checkWatchListAsync(FN, LN);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.0.230/EwService/service.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.0.230/EwService/service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ServiceSoap,
            
            ServiceSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.2")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
